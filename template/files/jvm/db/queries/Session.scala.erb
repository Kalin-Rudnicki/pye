package <%= @base_package %>.jvm.db.queries

import java.util.UUID

import org.squeryl.PrimitiveTypeMode._

import klib.Implicits._
import klib.fp.types._
import pye.RouteMatcher.MatchData
import pye.db._

import <%= @base_package %>.jvm.db.{models => M, Schema => S}
import <%= @base_package %>.shared.constants._
import <%= @base_package %>.shared.{data => D}

object Session {

  val Q = S.userSessions.queries

  private object `private` {
    object auth {}
    object create {}
    object read {}
    object update {}
    object delete {}
  }

  private[db] object db {
    object auth {}
    object create {

      def apply(user: M.User): Query[M.Session] =
        Q.insert(
          M.Session(
            user.id,
            UUID.randomUUID.toString,
          ),
        )

    }
    object read {

      val byToken = Q.query1(_.token)

    }
    object update {}
    object delete {}
  }

  object public {
    object auth {

      def getSessionToken(md: MatchData): Query[String] =
        Query(md.mHeader[String](UserSessionToken).toIO).orError("Missing session token")

    }
    object create {}
    object read {}
    object update {}
    object delete {

      def apply(token: String): Query[Unit] =
        Q.delete.where.single(_.token === token)

    }
  }

}
