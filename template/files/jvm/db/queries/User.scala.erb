package <%= @base_package %>.jvm.db.queries

import org.squeryl.PrimitiveTypeMode._
import org.mindrot.jbcrypt.BCrypt

import klib.Implicits._
import klib.fp.types._
import pye.RouteMatcher.MatchData
import pye.db._

import <%= @base_package %>.jvm.db.{models => M, Schema => S}
import <%= @base_package %>.shared.{data => D}

object User {

  val Q = S.users.queries

  private object `private` {
    object auth {}
    object create {}
    object read {}
    object update {}
    object delete {}
  }

  private[db] object db {
    object auth {}
    object create {}
    object read {}
    object update {}
    object delete {}
  }

  object public {
    object auth {

      def attemptLogin(login: D.user.Login): Query[D.user.UserSession] =
        for {
          user <- read.byUsername(login.username).maybe.orError("Invalid username")
          session <-
            BCrypt.checkpw(login.password, user.encryptedPassword) ?
              Session.db.create(user) |
              Query(IO.error(Message("Invalid password")))
        } yield D.user.UserSession(
          userId = user.id,
          username = user.username,
          firstName = user.firstName,
          lastName = user.lastName,
          email = user.email,
          token = session.token,
        )

      def getUserAndSession(md: MatchData): Query[(M.User, M.Session)] =
        for {
          sessionToken <- Session.public.auth.getSessionToken(md)
          session <- Session.db.read.byToken(sessionToken).maybe.orError("Invalid session token")
          user <- read.byId(session.userId).maybe.orError(s"User does not exist? [${session.userId}]")
        } yield (user, session)

      def getUser(md: MatchData): Query[M.User] =
        getUserAndSession(md).map(_._1)

    }
    object create {

      def apply(signUp: D.user.SignUp): Query[(M.User, M.Session)] =
        for {
          user <- Q.insert(
            M.User(
              username = signUp.username,
              encryptedPassword = BCrypt.hashpw(signUp.password, BCrypt.gensalt),
              firstName = signUp.firstName,
              lastName = signUp.lastName,
              email = signUp.email,
            ),
          )
          session <- Session.db.create(user)
        } yield (user, session)

    }
    object read {

      val byId = Q.query1(_.id)
      val byUsername = Q.query1(_.username)

    }
    object update {}
    object delete {}
  }

}
