package <%= @base_package %>.jvm.routes

import io.circe.generic.auto._
import jakarta.servlet.http.Cookie

import klib.Implicits._
import klib.fp.types._
import pye._
import pye.RouteMatcher._

import <%= @base_package %>.jvm.{db => Database}
import <%= @base_package %>.shared.constants._
import <%= @base_package %>.shared.{data => D}

object User {

  private def userCookie(token: Maybe[String]): Cookie =
    token match {
      case Some(token) =>
        val cookie = new Cookie(UserSessionToken, token)
        cookie.setPath("/")
        cookie.setSecure(true)
        cookie
      case None =>
        val cookie = new Cookie(UserSessionToken, "")
        cookie.setPath("/")
        cookie.setMaxAge(0)
        cookie.setSecure(true)
        cookie
    }

  val matcher: RouteMatcher =
    "user" /: oneOf(
      "sign-up" /: method("POST")(
        complete { md =>
          md.connectionFactory.withConnection {
            implicit c =>
              for {
                body <- md.bodyAs[D.SignUp]

                userSession <- {
                  for {
                    user <- Database.queries.User.create(body)
                    session <- Database.queries.Session.create(user)
                  } yield D.UserSession(
                    userId = user.id,
                    username = user.username,
                    firstName = user.firstName,
                    lastName = user.lastName,
                    email = user.email,
                    token = session.token,
                  )
                }.run
              } yield Response
                .json(userSession)
                .withCookies(userCookie(userSession.token.some))
                .some
          }
        },
      ),
      "login" /: method("POST")(
        complete { md =>
          md.connectionFactory.withConnection { implicit c =>
            for {
              body <- md.bodyAs[D.Login]
              userSession <- Database.queries.User.attemptLogin(body).run
            } yield Response
              .json(userSession)
              .withCookies(userCookie(userSession.token.some))
              .some
          }
        },
      ),
      "logout" /: method("POST")(
        complete { md =>
          md.connectionFactory.withConnection { implicit c =>
            for {
              tmp1 <- Database.queries.User.getUserAndSession(md).run
              (_, session) = tmp1
              _ <- Database.queries.Session.delete(session).run
            } yield Response
              .text("")
              .withCookies(userCookie(None))
              .some
          }
        },
      ),
      "from-session-token" /: method("GET")(
        complete { md =>
          md.connectionFactory.withConnection { implicit c =>
            for {
              tmp1 <- Database.queries.User.getUserAndSession(md).run
              (user, session) = tmp1
              userSession = D.UserSession(
                userId = user.id,
                username = user.username,
                firstName = user.firstName,
                lastName = user.lastName,
                email = user.email,
                token = session.token,
              )
            } yield Response.json(userSession).some
          }
        },
      ),
    )

}
