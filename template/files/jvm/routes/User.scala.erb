package <%= @base_package %>.jvm.routes

import io.circe.generic.auto._
import jakarta.servlet.http.Cookie

import klib.Implicits._
import klib.fp.types._
import pye._
import pye.RouteMatcher._

import <%= @base_package %>.jvm.db.{models => M, queries => Q}
import <%= @base_package %>.shared.constants._
import <%= @base_package %>.shared.{data => D}

object User {

  private def userCookie(token: Maybe[String]): Cookie =
    token match {
      case Some(token) =>
        val cookie = new Cookie(UserSessionToken, token)
        cookie.setPath("/")
        cookie.setSecure(true)
        cookie
      case None =>
        val cookie = new Cookie(UserSessionToken, "")
        cookie.setPath("/")
        cookie.setMaxAge(0)
        cookie.setSecure(true)
        cookie
    }

  val matcher: RouteMatcher =
    "user" /: oneOf(
      "sign-up" /: method("POST")(
        completeWithConnection { md => implicit c =>
            for {
              body <- md.body.decodeJson[D.user.SignUp]

              (user, session) <- Q.User.public.create(body).run
              userSession = D.user.UserSession(
                  userId = user.id,
                  username = user.username,
                  firstName = user.firstName,
                  lastName = user.lastName,
                  email = user.email,
                  token = session.token,
                )
            } yield Response
              .json(userSession)
              .withCookies(userCookie(userSession.token.some))
              .some
        },
      ),
      "login" /: method("POST")(
        completeWithConnection { md => implicit c =>
          for {
            body <- md.body.decodeJson[D.user.Login]
            userSession <- Q.User.public.auth.attemptLogin(body).run
          } yield Response
            .json(userSession)
            .withCookies(userCookie(userSession.token.some))
            .some
        },
      ),
      "logout" /: method("POST")(
        completeWithConnection { md => implicit c =>
          for {
            _ <- {
              for {
                sessionToken <- Q.Session.public.auth.getSessionToken(md)
                _ <- Q.Session.public.delete(sessionToken)
              } yield ()
            }.run
          } yield Response
            .text("")
            .withCookies(userCookie(None))
            .some
        },
      ),
      "from-session-token" /: method("GET")(
        completeWithConnection { md => implicit c =>
          for {
            (user, session) <- Q.User.public.auth.getUserAndSession(md).run
            userSession = D.user.UserSession(
              userId = user.id,
              username = user.username,
              firstName = user.firstName,
              lastName = user.lastName,
              email = user.email,
              token = session.token,
            )
          } yield Response.json(userSession).some
        },
      ),
    )

}
